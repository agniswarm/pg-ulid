# Makefile.win for ulid extension (nmake-friendly)
EXTENSION = ulid
VERSION = 1.0.0
DATA = sql/$(EXTENSION)--$(VERSION).sql

# Default target
all: ulid_generator.exe

# Build the Go binary
ulid_generator.exe:
	@echo Building Go binary...
	@cd src && go mod download && go build -o ..\ulid_generator.exe .

# install-binary: call powershell script to copy exe into Postgres bindir (respects DESTDIR if set)
install-binary: ulid_generator.exe
	@echo Installing ulid_generator.exe to destination bindir (via scripts\install_windows.ps1)...
	powershell -NoProfile -ExecutionPolicy Bypass -File scripts\install_windows.ps1 "$(DESTDIR)"

# install: call powershell script to write substituted SQL into Postgres shared extension dir
install: install-binary
	@echo Installing SQL to Postgres shared extension directory (via scripts\install_sql_windows.ps1)...
	powershell -NoProfile -ExecutionPolicy Bypass -File scripts\install_sql_windows.ps1 "$(DESTDIR)" "$(DATA)" "$(EXTENSION)" "$(VERSION)"

# Run Go tests
test:
	@cd test && go test -v ./...

# Windows installcheck: call Windows CI script if present
installcheck:
	@echo Running PostgreSQL extension tests (Windows)...
	@if exist test\build\ci.bat ( test\build\ci.bat && (echo Extension tests passed!) || (echo Extension tests failed! & exit /b 1) ) else ( echo test\build\ci.bat not found; exit /b 1 )

# Clean
clean:
	@if exist ulid_generator.exe del /Q ulid_generator.exe
	@if exist src ( cd src && go clean )
	@if exist test ( cd test && go clean -testcache )

# Help
help:
	@echo Available targets:
	@echo   all              - Build the extension (default)
	@echo   install-binary  - Install the extension binary into Postgres bindir
	@echo   install          - Install SQL into Postgres shared extension dir (uses pg_config)
	@echo   test             - Run Go tests
	@echo   installcheck     - Run Windows regression tests (requires test\build\ci.bat)
	@echo   clean            - Clean build artifacts

.PHONY: all install-binary install test installcheck clean help
