# Makefile.win for ulid extension (nmake-friendly)
EXTENSION = ulid
VERSION = 1.0.0
DATA = sql/$(EXTENSION)--$(VERSION).sql

# Default target
all: ulid_generator.exe

# Build the Go binary
# Uses cmd /c to run in one line and ensure proper error propagation
ulid_generator.exe:
	@echo Building Go binary...
	cd src && go mod download && cd .. && cd src && go build -o ..\ulid_generator.exe .

# install-binary: copy the exe into PostgreSQL bindir (respects DESTDIR if set)
install-binary: ulid_generator.exe
	@echo Installing ulid_generator.exe to destination bindir...
	@powershell -NoProfile -Command ^
	  "$bind = (& pg_config --bindir).Trim(); ^ 
	   $dest = '$(DESTDIR)'; ^
	   if(-not $dest) { $dest = '' } ; ^
	   $target = Join-Path $dest $bind; ^
	   New-Item -ItemType Directory -Force -Path $target | Out-Null; ^
	   Copy-Item -Force ulid_generator.exe -Destination (Join-Path $target 'ulid_generator.exe'); ^
	   Write-Host 'Installed:' (Join-Path $target 'ulid_generator.exe')"

# install: put the substituted SQL into Postgres shared extension dir (no PGXS install call)
install: install-binary
	@echo Installing SQL to Postgres shared extension directory...
	@powershell -NoProfile -Command ^
	  "$share = (& pg_config --sharedir).Trim(); ^
	   $bind = (& pg_config --bindir).Trim(); ^
	   $dest = '$(DESTDIR)'; ^
	   if(-not $dest) { $dest = '' } ; ^
	   $instDir = Join-Path $dest $share; ^
	   $extDir = Join-Path $instDir 'extension'; ^
	   New-Item -ItemType Directory -Force -Path $extDir | Out-Null; ^
	   $src = Resolve-Path '$(DATA)'; ^
	   if(-not (Test-Path $src)) { Write-Host 'ERROR: SQL source $(DATA) not found'; exit 2 } ; ^
	   (Get-Content $src) -replace '@BINDIR@', $bind | Set-Content -Encoding UTF8 (Join-Path $extDir '$(EXTENSION)--$(VERSION).sql'); ^
	   Write-Host 'Installed SQL to:' (Join-Path $extDir '$(EXTENSION)--$(VERSION).sql')"

# Run Go tests
test:
	@cd test && go test -v ./...

# Windows installcheck: call the Windows CI script if present
installcheck:
	@echo Running PostgreSQL extension tests (Windows)...
	@if exist test\build\ci.bat ( ^
		test\build\ci.bat && (echo Extension tests passed!) || (echo Extension tests failed! & exit /b 1) ^
	) else ( ^
		echo test\build\ci.bat not found; exit /b 1 ^
	)

# Clean
clean:
	@if exist ulid_generator.exe del /Q ulid_generator.exe
	cd src && go clean || true
	cd test && go clean -testcache || true

# Help
help:
	@echo Available targets:
	@echo   all              - Build the extension (default)
	@echo   install-binary  - Install the extension binary into Postgres bindir
	@echo   install          - Install SQL into Postgres shared extension dir (uses pg_config)
	@echo   test             - Run Go tests
	@echo   installcheck     - Run Windows regression tests (requires test\build\ci.bat)
	@echo   clean            - Clean build artifacts

.PHONY: all install-binary install test installcheck clean help
