EXTENSION = ulid
EXTVERSION = 0.1.1

MODULE_big = $(EXTENSION)
OBJS = src/ulid.obj
DATA = $(EXTENSION).control sql/$(EXTENSION)--$(EXTVERSION).sql
REGRESS =

# Toolchain
CC = cl
AR = lib
RM = del /q
MKDIR_P = mkdir

# Try to find pg_config and PGXS
PG_CONFIG = pg_config
PG_CONFIG_PATH = $(shell where $(PG_CONFIG) 2>nul)
PGXS = $(shell $(PG_CONFIG) --pgxs 2>nul)

!IF "$(PGXS)" == ""
  # PGXS not found, use manual rules
  # Try to derive include/lib paths from pg_config (if available)
  !IF "$(PG_CONFIG_PATH)" != ""
    PG_INCLUDEDIR = $(shell $(PG_CONFIG) --includedir-server 2>nul)
    PG_LIBDIR     = $(shell $(PG_CONFIG) --libdir 2>nul)
    PG_PKGLIBDIR  = $(shell $(PG_CONFIG) --pkglibdir 2>nul)
  !ELSE
    PG_INCLUDEDIR = C:\Program Files\PostgreSQL\$(EXTVERSION)\include
    PG_LIBDIR     = C:\Program Files\PostgreSQL\$(EXTVERSION)\lib
    PG_PKGLIBDIR  = C:\Program Files\PostgreSQL\$(EXTVERSION)\lib
  !ENDIF

  # Prefer server include if present
  PG_SERVER_INC = $(PG_INCLUDEDIR)\server
  !IF EXIST("$(PG_SERVER_INC)")
    PG_CPPFLAGS = /I"$(PG_SERVER_INC)"
  !ELSE
    PG_CPPFLAGS = /I"$(PG_INCLUDEDIR)"
  !ENDIF

  # Compiler & flags
  CFLAGS = /O2 /std:c11 /DWIN32 /D_WINDOWS /Wall /WX-
  LDFLAGS = /DLL

  # Link libs: try to link against postgres server library; fallback to libpq
  LIBS = /LIBPATH:"$(PG_LIBDIR)" postgres.lib

  # Pattern rule: compile C -> object
  src\%.obj: src\%.c
	@$(MKDIR_P) $(@D) 2>nul
	$(CC) $(CFLAGS) $(PG_CPPFLAGS) /c $< /Fo$@

  # Link DLL
  $(EXTENSION).dll: $(OBJS)
	@echo Linking $(EXTENSION).dll
	$(CC) $(LDFLAGS) /OUT:$@ $(OBJS) $(LIBS)

  # Default target
  all: $(EXTENSION).dll
	@echo "Build complete: $(EXTENSION).dll"

  # Install target (optional): copy into PG pkglibdir if known
  install: $(EXTENSION).dll
  !IF "$(PG_PKGLIBDIR)" != ""
	@echo "Installing $(EXTENSION).dll into $(PG_PKGLIBDIR)"
	@copy $(EXTENSION).dll "$(PG_PKGLIBDIR)\$(EXTENSION).dll" || echo "warning: copy failed; may need permissions"
  !ELSE
	@echo "PG_PKGLIBDIR not detected; skipping install copy step"
  !ENDIF

  # installcheck target: run Windows CI batch tests
  installcheck: all
	@echo "Running Windows CI batch test script..."
	cmd.exe /C "cd /d %CD% && test\build\ci.bat"

  # Clean
  clean:
	@echo "Cleaning artifacts..."
	@$(RM) $(OBJS) $(EXTENSION).dll regression.diffs regression.out 2>nul
	@if exist results rmdir /s /q results 2>nul
	@if exist tmp_check rmdir /s /q tmp_check 2>nul
!ELSE
  # PGXS found, include it
  !INCLUDE $(PGXS)
  # When PGXS is used, the standard targets (all, install, installcheck, clean) are provided.
  # We still provide a few convenience aliases below to keep compatibility.
!ENDIF

.PHONY: all install installcheck clean
