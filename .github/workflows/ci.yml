name: build
on: [push, pull_request]

jobs:
  ubuntu:
    name: ubuntu (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 19
            os: ubuntu-24.04
          - postgres: 18
            os: ubuntu-24.04
          - postgres: 17
            os: ubuntu-24.04
          - postgres: 16
            os: ubuntu-24.04-arm
          - postgres: 15
            os: ubuntu-22.04
          - postgres: 14
            os: ubuntu-22.04-arm
          - postgres: 13
            os: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}
          dev-files: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build
        run: |
          # set PG_CFLAGS with the extra flag for PG >= 18
          export PG_CFLAGS="${{ matrix.postgres >= 18 && '-Wno-missing-field-initializers' || '' }} -DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare"
          make

      - name: Install (preserve PG_CONFIG)
        run: |
          export PG_CONFIG=$(which pg_config)
          sudo --preserve-env=PG_CONFIG make install-local

      - name: Ensure Postgres running
        run: |
          sudo service postgresql start || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: installcheck
        run: make installcheck

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          echo "Checking for regression.diffs:"
          if [ -f regression.diffs ]; then
            cat regression.diffs
          else
            echo "No regression.diffs found"
          fi

      - name: Extra deps for prove_installcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y libipc-run-perl

      - name: perl install-check tests
        run: make prove_installcheck

  mac:
    name: macos (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: macos-15
          - postgres: 14
            os: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres (brew)
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build
        run: |
          export PG_CFLAGS="-DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-unknown-warning-option"
          make

      - name: Install
        run: make install

      - name: Ensure Postgres running (brew)
        run: |
          brew services start postgresql@${{ matrix.postgres }} || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: installcheck
        run: make installcheck

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          echo "Checking for regression.diffs:"
          if [ -f regression.diffs ]; then
            cat regression.diffs
          else
            echo "No regression.diffs found"
          fi

      - name: TAP tests support & prove_installcheck
        run: |
          brew install cpanm || true
          cpanm --notest IPC::Run || true
          TAG=${{ matrix.postgres == 17 && 'REL_17_6' || 'REL_14_19' }}
          wget -q https://github.com/postgres/postgres/archive/refs/tags/$TAG.tar.gz
          tar xf $TAG.tar.gz
          mv postgres-$TAG postgres || true
        env:
          TAG: ${{ matrix.postgres == 17 && 'REL_17_6' || 'REL_14_19' }}
      - name: perl prove tests
        run: |
          make prove_installcheck PROVE_FLAGS="-I ./postgres/src/test/perl -I ./test/perl"
        env:
          PERL5LIB: /Users/runner/perl5/lib/perl5

      - name: scan-build (optional)
        run: make clean && $(brew --prefix llvm@$LLVM_VERSION)/bin/scan-build --status-bugs make
        env:
          LLVM_VERSION: ${{ matrix.os == 'macos-15' && 18 || 15 }}
          PG_CFLAGS: -DUSE_ASSERT_CHECKING

  windows:
    name: windows (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: windows-2025
          - postgres: 14
            os: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build & install (MSVC)
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" && ^
          nmake /NOLOGO /F Makefile.win && ^
          nmake /NOLOGO /F Makefile.win install
        shell: cmd

      - name: Ensure Postgres service started
        run: |
          net start postgresql-x64-${{ matrix.postgres }} || echo "Service start may not be required on hosted runner"
          REM Wait loop for pg_isready
          :wait
          pg_isready
          if errorlevel 1 (
            echo Waiting for PostgreSQL to start...
            timeout /t 1 /nobreak >nul
            goto wait
          )
          echo PostgreSQL is ready!
        shell: cmd

      - name: installcheck
        run: nmake /NOLOGO /F Makefile.win installcheck
        shell: cmd

      - name: Clean
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" && ^
          nmake /NOLOGO /F Makefile.win clean
        shell: cmd

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          if exist regression.diffs (
            type regression.diffs
          ) else (
            echo No regression.diffs found
          )
        shell: cmd

  i386:
    name: i386 (postgres 15)
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    runs-on: ubuntu-latest
    container:
      image: debian:12
      options: --platform linux/386
    steps:
      - name: Minimal packages
        run: apt-get update && apt-get install -y build-essential git libipc-run-perl postgresql-15 postgresql-server-dev-15 sudo golang-go

      - name: Start Postgres
        run: service postgresql start || true

      - name: Build inside container (i386)
        run: |
          git clone https://github.com/${{ github.repository }}.git pg-ulid
          cd pg-ulid
          git fetch origin ${{ github.ref }}
          git reset --hard FETCH_HEAD
          make
          make install
          chown -R postgres .
          service postgresql start || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          sudo -u postgres make installcheck
        env:
          PG_CFLAGS: -DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          echo "Working directory contents:"
          ls -la
          echo "Checking for regression.diffs:"
          if [ -f pg-ulid/regression.diffs ]; then
            cat pg-ulid/regression.diffs
          else
            echo "No regression.diffs found in pg-ulid/"
          fi

  valgrind:
    name: valgrind
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres (valgrind)
        uses: ankane/setup-postgres-valgrind@v1
        with:
          postgres-version: 17
          check-ub: yes

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build with no OPTFLAGS
        run: make OPTFLAGS=""

      - name: Install preserving PG_CONFIG
        run: sudo --preserve-env=PG_CONFIG make install-local

      - name: installcheck
        run: make installcheck
