name: build
on: [push, pull_request]
jobs:
  ubuntu:
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 19
            os: ubuntu-24.04
          - postgres: 18
            os: ubuntu-24.04
          - postgres: 17
            os: ubuntu-24.04
          - postgres: 16
            os: ubuntu-24.04-arm
          - postgres: 15
            os: ubuntu-22.04
          - postgres: 14
            os: ubuntu-22.04-arm
          - postgres: 13
            os: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}
          dev-files: true
      - run: |
          make clean || true
          rm -f src/*.o src/*.bc || true
          make
        env:
          PG_CFLAGS: ${{ matrix.postgres >= 18 && '-Wno-missing-field-initializers' || '' }} -DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare
      - run: |
          export PG_CONFIG=`which pg_config`
          sudo --preserve-env=PG_CONFIG make install
      - run: make installcheck
      - if: ${{ failure() }}
        run: cat regression.diffs
  mac:
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test latest supported versions on macOS
          - postgres: 17
            os: macos-15
          - postgres: 16
            os: macos-15
          - postgres: 14
            os: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}
      - run: make
        env:
          PG_CFLAGS: -DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-unknown-warning-option
      - run: make install
      - run: make installcheck
      - if: ${{ failure() }}
        run: cat regression.diffs
  
  windows:
    name: Windows (Postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: windows-2025
          - postgres: 16
            os: windows-2022
          - postgres: 14
            os: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PostgreSQL
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}

      - name: Show basic environment & Postgres info
        shell: cmd
        env:
          MATRIX_POSTGRES: ${{ matrix.postgres }}
        run: |
          echo ==== Environment ====
          ver
          echo ==== PATH snippet ====
          echo %PATH:~0,200%
          echo ==== Matrix postgres (env) ====
          echo %MATRIX_POSTGRES%
          echo.

      - name: Build, install and run tests (nmake)
        shell: cmd
        env:
          MATRIX_POSTGRES: ${{ matrix.postgres }}
          # Optionally override PGROOT in the workflow dispatch or repo secrets if your runner installs Postgres elsewhere.
          # If unspecified, we build PGROOT from the conventional installer location below.
        run: |
          REM --- Compute PGROOT from matrix value (conventional Postgres installer location) ---
          set "MATRIX_POSTGRES=%MATRIX_POSTGRES%"
          set "PGROOT=C:\Program Files\PostgreSQL\%MATRIX_POSTGRES%"
          echo Using PGROOT=%PGROOT%

          REM --- Debug: show a few files that help diagnose include/lib availability ---
          if exist "%PGROOT%\bin\psql" (
            echo Found psql at %PGROOT%\bin\psql
          ) else (
            echo WARNING: psql not found at %PGROOT%\bin\psql - you may need to adjust PGROOT
          )

          if exist "%PGROOT%\include\server\postgres.h" (
            echo Found server headers at %PGROOT%\include\server
          ) else (
            echo WARNING: Postgres server headers not found at %PGROOT%\include\server
          )

          if exist "%PGROOT%\lib\postgres.lib" (
            echo Found postgres.lib at %PGROOT%\lib
          ) else (
            echo WARNING: postgres.lib not found at %PGROOT%\lib
          )

          REM --- Ensure Visual Studio developer environment is loaded (adjust path if different) ---
          if exist "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ) else if exist "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ) else (
            echo "WARNING: vcvars64.bat not found at expected locations. Please ensure Visual Studio is installed or adjust the path."
            exit /b 1
          )

          REM --- Run the build sequence (nmake) and fail early on any step ---
          echo ----- nmake build -----
          nmake /NOLOGO /F Makefile.win || (echo "nmake build failed" & exit /b 1)

          echo ----- nmake install -----
          nmake /NOLOGO /F Makefile.win install || (echo "nmake install failed" & exit /b 1)

          echo ----- nmake installcheck -----
          REM Makefile.win should implement installcheck to run test\build\ci.bat or pg_regress as appropriate.
          nmake /NOLOGO /F Makefile.win installcheck || (
            echo "nmake installcheck failed - attempting to show regression.diffs"
            if exist regression.diffs ( type regression.diffs ) else ( echo "no regression.diffs found" )
            exit /b 1
          )

          echo ----- nmake clean -----
          nmake /NOLOGO /F Makefile.win clean || (echo "nmake clean failed" & exit /b 1)

          echo ----- nmake uninstall -----
          nmake /NOLOGO /F Makefile.win uninstall || (echo "nmake uninstall failed" & exit /b 1)

      - name: "On failure: show regression.diffs (if present)"
        if: failure()
        shell: cmd
        run: |
          if exist regression.diffs (
            echo ===== regression.diffs =====
            type regression.diffs
          ) else (
            echo "No regression.diffs file found"
          )

      - name: Upload test artifacts (optional)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-logs
          path: |
            regression.diffs
            regression.out
            results
  i386:
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    runs-on: ubuntu-latest
    container:
      image: debian:12
      options: --platform linux/386
    steps:
      - run: apt-get update && apt-get install -y build-essential git libipc-run-perl postgresql-16 postgresql-server-dev-16 sudo
      - run: service postgresql start
      - run: |
          git clone https://github.com/${{ github.repository }}.git pg-ulid
          cd pg-ulid
          git fetch origin ${{ github.ref }}
          git reset --hard FETCH_HEAD
          make
          make install
          chown -R postgres .
          sudo -u postgres make installcheck
        env:
          PG_CFLAGS: -DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare
      - if: ${{ failure() }}
        run: cat pg-ulid/regression.diffs
