name: Build and Test ULID Extension
on: [push, pull_request]

jobs:
  linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - postgres: 19
            os: ubuntu-24.04
          - postgres: 18
            os: ubuntu-24.04
          - postgres: 17
            os: ubuntu-24.04
          - postgres: 16
            os: ubuntu-24.04
          - postgres: 15
            os: ubuntu-22.04
          - postgres: 14
            os: ubuntu-22.04
          - postgres: 13
            os: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PostgreSQL
        uses: adjust/pg-ext-actions/pg-setup@master
        with:
          version: ${{ matrix.postgres }}
      
      - name: Build extension
        run: |
          make clean || true
          make
        env:
          PG_CFLAGS: -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare
      
      - name: Install extension
        run: |
          sudo make install
      
      - name: Run tests
        run: |
          make installcheck
      
      - name: Show test failures
        if: failure()
        run: |
          cat regression.diffs || echo "No regression.diffs found"

  macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - postgres: 17
            os: macos-14
          - postgres: 16
            os: macos-14
          - postgres: 14
            os: macos-12
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PostgreSQL
        uses: adjust/pg-ext-actions/pg-setup@master
        with:
          version: ${{ matrix.postgres }}
      
      - name: Build extension
        run: |
          make clean || true
          make
        env:
          PG_CFLAGS: -Wall -Wextra -Werror -Wno-unused-parameter -Wno-unknown-warning-option
      
      - name: Install extension
        run: |
          sudo make install
      
      - name: Run tests
        run: |
          make installcheck
      
      - name: Show test failures
        if: failure()
        run: |
          cat regression.diffs || echo "No regression.diffs found"

  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - postgres: 17
            os: windows-2022
          - postgres: 16
            os: windows-2022
          - postgres: 14
            os: windows-2022
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PostgreSQL
        uses: adjust/pg-ext-actions/pg-setup@master
        with:
          version: ${{ matrix.postgres }}
      
      - name: Set PGROOT environment variable
        shell: pwsh
        run: |
          $pgPath = Get-Command pg_config | Select-Object -ExpandProperty Source
          $pgDir = Split-Path (Split-Path $pgPath)
          echo "PGROOT=$pgDir" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Found PostgreSQL at: $pgDir"
      
      - name: Build with nmake
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          nmake /F Makefile.win PGROOT=%PGROOT%
      
      - name: Install extension
        shell: cmd
        run: |
          nmake /F Makefile.win PGROOT=%PGROOT% install
      
      - name: Run tests
        shell: cmd
        run: |
          nmake /F Makefile.win PGROOT=%PGROOT% installcheck
      
      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: windows-test-results-${{ matrix.postgres }}
          path: |
            regression.diffs
            regression.out

  # i386:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Build and test in i386 container
  #       run: |
  #         docker run --platform linux/386 -it --rm \
  #           -v $(pwd):/src \
  #           -w /src \
  #           i386/debian:bookworm \
  #           sh -c "
  #           apt-get update && \
  #           apt-get install -y build-essential postgresql-16 postgresql-server-dev-16 sudo && \
  #           service postgresql start && \
  #           make && \
  #           make install && \
  #           sudo -u postgres make installcheck
  #           "
