name: Build and Test ULID Extension
on: [push, pull_request]

jobs:
  linux:
    name: Linux Builds
    strategy:
      fail-fast: false
      matrix:
        include:
          - pg: 17
            os: ubuntu-24.04
          - pg: 16
            os: ubuntu-24.04-arm
          - pg: 15
            os: ubuntu-22.04
          - pg: 14
            os: ubuntu-22.04-arm
          - pg: 13
            os: ubuntu-22.04

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL
        uses: agniswarm/pg-ext-actions/pg-setup@master
        with:
          version: ${{ matrix.pg }}
          install-contrib: 'true'
          operating-system: ${{ matrix.os }}

      - name: Verify PostgreSQL installation
        run: |
          echo "Verifying PostgreSQL installation..."
          pg_config --version || echo "pg_config not found"
          echo "PostgreSQL installation verified"

      - name: Build and test extension
        uses: agniswarm/pg-ext-actions/build-check@master
        with:
          working-directory: ./
          operating-system: ${{ matrix.os }}

  macos:
    name: macOS Builds
    strategy:
      fail-fast: false
      matrix:
        include:
          - pg: 17
            os: macos-15
          - pg: 14
            os: macos-13

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL
        uses: agniswarm/pg-ext-actions/pg-setup@master
        with:
          version: ${{ matrix.pg }}
          install-contrib: 'true'
          operating-system: ${{ matrix.os }}

      - name: Verify PostgreSQL installation
        run: |
          echo "Verifying PostgreSQL installation..."
          pg_config --version || echo "pg_config not found"
          echo "PostgreSQL installation verified"

      - name: Build and test extension
        uses: agniswarm/pg-ext-actions/build-check@master
        with:
          working-directory: ./
          operating-system: ${{ matrix.os }}

  # windows:
  #   name: Windows Builds
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - pg: 17
  #           os: windows-2025
  #         - pg: 14
  #           os: windows-2022

  #   runs-on: ${{ matrix.os }}
  #   env:
  #     PG_VERSION: ${{ matrix.pg }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup PostgreSQL (Windows)
  #       uses: agniswarm/pg-ext-actions/pg-setup@master
  #       with:
  #         version: ${{ matrix.pg }}
  #         install-contrib: 'true'
  #         operating-system: ${{ matrix.os }}
  #     # - name: Setup MSVC Developer Command Prompt
  #     #   uses: ilammy/msvc-dev-cmd@v1
  #     - name: Verify PostgreSQL installation
  #       run: |
  #         echo "Verifying PostgreSQL installation..."
  #         pg_config --version || echo "pg_config not found"
  #         echo "PostgreSQL installation verified"
  #       shell: cmd

  #     - name: Build and test extension
  #       uses: agniswarm/pg-ext-actions/build-check@master
  #       with:
  #         working-directory: ./
  #         operating-system: ${{ matrix.os }}

  windows:
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: windows-2025
          - postgres: 14
            os: windows-2022
    steps:
      - uses: actions/checkout@v4
      - uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" && ^
          nmake /NOLOGO /F Makefile.win && ^
          nmake /NOLOGO /F Makefile.win install && ^
          nmake /NOLOGO /F Makefile.win installcheck ${{ matrix.postgres != 17 && 'PG_REGRESS=$(PGROOT)\bin\pg_regress' || '' }} && ^
          nmake /NOLOGO /F Makefile.win clean && ^
          nmake /NOLOGO /F Makefile.win uninstall
        shell: cmd
      - if: ${{ failure() }}
        run: cat regression.diffs
