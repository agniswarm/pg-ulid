name: build
on: [push, pull_request]

# CI Configuration: Running only on latest OS and PostgreSQL versions for faster builds
# Commented out older versions to reduce CI time and focus on current compatibility

jobs:
  ubuntu:
    name: ubuntu latest (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 19
            os: ubuntu-24.04
          # - postgres: 18
          #   os: ubuntu-24.04
          # - postgres: 17
          #   os: ubuntu-24.04
          # - postgres: 16
          #   os: ubuntu-24.04-arm
          # - postgres: 15
          #   os: ubuntu-22.04
          # - postgres: 14
          #   os: ubuntu-22.04-arm
          # - postgres: 13
          #   os: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Repo info (diagnostics)
        run: |
          echo ">>> HEAD commit:"
          git rev-parse HEAD || true
          echo ">>> Branch / ref: $GITHUB_REF"
          ls -la || true

      - name: Setup Postgres
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}
          dev-files: true

      - name: pg_config info
        run: |
          which pg_config
          pg_config --version
          echo "pkglibdir=$(pg_config --pkglibdir)"
          echo "sharedir=$(pg_config --sharedir)"
          ls -la "$(pg_config --sharedir)/extension" || true

      - name: Setup Go (for generator if needed)
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Clean previous artifacts
        run: |
          make clean || true
          rm -f src/*.o src/*.bc || true
          ls -la src || true
          ls -la sql || true

      - name: Build
        env:
          PG_CFLAGS: "${{ matrix.postgres >= 18 && '-Wno-missing-field-initializers' || '' }} -DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare"
        run: |
          echo "PG_CFLAGS=$PG_CFLAGS"
          make

      - name: Install (install-local, preserve PG_CONFIG)
        run: |
          export PG_CONFIG=$(which pg_config)
          sudo --preserve-env=PG_CONFIG make install-local

      - name: Show installed files
        run: |
          echo "pkglibdir:"
          ls -la "$(pg_config --pkglibdir)" || true
          echo "sharedir/extension:"
          ls -la "$(pg_config --sharedir)/extension" || true
          echo "ulid--*.sql:"
          ls -la "$(pg_config --sharedir)/extension/ulid--*.sql" || true

      - name: Ensure Postgres running
        run: |
          sudo service postgresql start || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run installcheck
        run: make installcheck

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          if [ -f regression.diffs ]; then
            cat regression.diffs
          else
            echo "No regression.diffs found"
          fi
  mac:
    name: macos latest (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: macos-15
          # - postgres: 14
          #   os: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Repo info (diagnostics)
        run: |
          echo ">>> HEAD commit:"
          git rev-parse HEAD || true
          echo ">>> Branch / ref: $GITHUB_REF"
          ls -la || true

      - name: Setup Postgres (brew)
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}

      - name: pg_config info (mac)
        run: |
          which pg_config || true
          pg_config --version || true
          echo "bindir=$(pg_config --bindir)"
          echo "pkglibdir=$(pg_config --pkglibdir)"
          echo "sharedir=$(pg_config --sharedir)"
          ls -la "$(pg_config --sharedir)/extension" || true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Clean previous artifacts
        run: |
          make clean || true
          rm -f src/*.o src/*.bc || true
          ls -la src || true
          ls -la sql || true

      - name: Build
        env:
          PG_CFLAGS: "-DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-unknown-warning-option"
        run: |
          echo "PG_CFLAGS=$PG_CFLAGS"
          set -e
          make

      - name: Install (install-local) - write files into Postgres sharedir
        run: |
          export PG_CONFIG=$(which pg_config)
          echo "Using PG_CONFIG=$PG_CONFIG"
          sudo --preserve-env=PG_CONFIG make install-local

      - name: Ensure Postgres service started (brew)
        run: |
          # start Postgres with brew services (may already be started by the action)
          brew services start postgresql@${{ matrix.postgres }} || true
          # wait for pg_isready
          until pg_isready; do
            echo "Waiting for PostgreSQL (brew)..."
            sleep 1
          done

      - name: installcheck (native SQL regression tests)
        run: |
          set -e
          make installcheck

      - name: Setup TAP test support (download postgres sources + IPC::Run)
        env:
          TAG: ${{ matrix.postgres == 17 && 'REL_17_6' || 'REL_14_19' }}
        run: |
          set -e
          echo "TAG=$TAG"
          # install cpanm and IPC::Run for TAP tests
          brew install cpanm || true
          cpanm --notest IPC::Run || true
          # download Postgres source tarball for the chosen tag so prove can use postgres/src/test/perl
          if [ ! -d "./postgres" ]; then
            wget -q https://github.com/postgres/postgres/archive/refs/tags/$TAG.tar.gz
            tar xf $TAG.tar.gz
            mv postgres-$TAG postgres || true
          else
            echo "./postgres already present, skipping download"
          fi
          ls -la postgres || true

      - name: Run perl TAP tests (prove_installcheck)
        env:
          PERL5LIB: /Users/runner/perl5/lib/perl5
          PROVE_FLAGS: "-I ./postgres/src/test/perl -I ./test/perl"
        run: |
          set -e
          echo "Running prove_installcheck (per Makefile target)..."
          make prove_installcheck PROVE_FLAGS="$PROVE_FLAGS"

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          echo "Failure - checking for regression.diffs"
          if [ -f regression.diffs ]; then
            cat regression.diffs
          else
            echo "No regression.diffs found"
          fi

  windows:
    name: windows latest (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: windows-2025
          # - postgres: 14
          #   os: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}

      - name: Build & install (MSVC)
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          where cl || echo "cl not found"
          where nmake || echo "nmake not found"
          where pg_config || echo "pg_config not found"
          for /f "tokens=*" %%i in ('pg_config --includedir') do set PG_INCLUDEDIR=%%i
          for /f "tokens=*" %%i in ('pg_config --includedir-server') do set PG_INCLUDEDIR_SERVER=%%i
          for /f "tokens=*" %%i in ('pg_config --pkglibdir') do set PG_PKGLIBDIR=%%i
          for /f "tokens=*" %%i in ('pg_config --sharedir') do set PG_SHAREDIR=%%i
          nmake /NOLOGO /F Makefile.win clean
          nmake /NOLOGO /F Makefile.win
          nmake /NOLOGO /F Makefile.win install
        shell: cmd

      - name: Ensure Postgres service started
        run: |
          net start postgresql-x64-${{ matrix.postgres }} || echo "Service may not need manual start"
          :wait
          pg_isready
          if errorlevel 1 (
            echo Waiting for PostgreSQL...
            timeout /t 1 /nobreak >nul
            goto wait
          )
          echo PostgreSQL is ready!
        shell: cmd

      - name: installcheck
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          for /f "tokens=*" %%i in ('pg_config --includedir') do set PG_INCLUDEDIR=%%i
          for /f "tokens=*" %%i in ('pg_config --includedir-server') do set PG_INCLUDEDIR_SERVER=%%i
          for /f "tokens=*" %%i in ('pg_config --pkglibdir') do set PG_PKGLIBDIR=%%i
          for /f "tokens=*" %%i in ('pg_config --sharedir') do set PG_SHAREDIR=%%i
          nmake /NOLOGO /F Makefile.win installcheck
        shell: cmd

      - name: Clean
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          for /f "tokens=*" %%i in ('pg_config --includedir') do set PG_INCLUDEDIR=%%i
          for /f "tokens=*" %%i in ('pg_config --includedir-server') do set PG_INCLUDEDIR_SERVER=%%i
          for /f "tokens=*" %%i in ('pg_config --pkglibdir') do set PG_PKGLIBDIR=%%i
          for /f "tokens=*" %%i in ('pg_config --sharedir') do set PG_SHAREDIR=%%i
          nmake /NOLOGO /F Makefile.win clean
        shell: cmd

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          if exist regression.diffs (
            type regression.diffs
          ) else (
            echo No regression.diffs found
          )
        shell: cmd

  i386:
    name: i386 (postgres 15)
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    runs-on: ubuntu-latest
    container:
      image: debian:12
      options: --platform linux/386
    steps:
      - name: Minimal packages
        run: apt-get update && apt-get install -y build-essential git libipc-run-perl postgresql-15 postgresql-server-dev-15 sudo

      - name: Start Postgres
        run: service postgresql start || true

      - name: Build & install (i386)
        id: build_install
        run: |
          set -e
          git clone https://github.com/${{ github.repository }}.git pg-ulid
          cd pg-ulid
          git fetch origin ${{ github.ref }}
          git reset --hard FETCH_HEAD
          echo "=== repo sql/ listing ==="
          ls -la sql || true
          echo "=== repo src/ listing ==="
          ls -la src || true
          echo "=== Cleaning previous build artifacts ==="
          make clean || true
          rm -f src/*.o src/*.bc || true
          echo "=== Building extension (i386) ==="
          make
          echo "=== Installing extension ==="
          export PG_CONFIG=$(which pg_config)
          sudo --preserve-env=PG_CONFIG make install
        env:
          PG_CFLAGS: "-DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare"

      - name: Ensure Postgres running (i386)
        run: |
          sudo service postgresql start || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run regression tests (i386)
        id: run_tests
        run: |
          set -e
          cd pg-ulid
          echo "=== Running installcheck as postgres user ==="
          sudo -u postgres make installcheck
        env:
          PG_CFLAGS: "-DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare"

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          echo "Working directory contents:"
          ls -la
          echo "Checking for regression.diffs:"
          if [ -f pg-ulid/regression.diffs ]; then
            cat pg-ulid/regression.diffs
          else
            echo "No regression.diffs found in pg-ulid/"
          fi
