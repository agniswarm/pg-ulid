name: Build and Test ULID Extension
on: [push, pull_request]

jobs:
  linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - postgres: 17
            os: ubuntu-24.04
          - postgres: 16
            os: ubuntu-24.04
          - postgres: 15
            os: ubuntu-22.04
          - postgres: 14
            os: ubuntu-22.04
          - postgres: 13
            os: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PostgreSQL
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-${{ matrix.postgres }} postgresql-server-dev-${{ matrix.postgres }}
      
      - name: Start PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
      
      - name: Build extension
        run: |
          make clean || true
          make PG_CONFIG=/usr/bin/pg_config
        env:
          PG_CFLAGS: -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare
      
      - name: Install extension
        run: |
          sudo make PG_CONFIG=/usr/bin/pg_config install
      
      - name: Run tests
        run: |
          make PG_CONFIG=/usr/bin/pg_config installcheck
      
      - name: Show test failures
        if: failure()
        run: |
          cat regression.diffs || echo "No regression.diffs found"

  macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - postgres: 17
            os: macos-14
          - postgres: 16
            os: macos-14
          - postgres: 14
            os: macos-12
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install PostgreSQL
        run: |
          brew update
          brew install postgresql@${{ matrix.postgres }}
          echo "$(brew --prefix postgresql@${{ matrix.postgres }})/bin" >> $GITHUB_PATH
      
      - name: Build extension (with filtered flags)
        run: |
          make clean || true
          # Filter out problematic flags for macOS
          make PG_CONFIG=$(brew --prefix postgresql@${{ matrix.postgres }})/bin/pg_config \
            CFLAGS="-Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wcast-function-type -Wformat-security -fno-strict-aliasing -fwrapv -Wno-unused-command-line-argument -O2 -fvisibility=hidden -I. -I./ -I$(brew --prefix postgresql@${{ matrix.postgres }})/include/postgresql/server -I$(brew --prefix postgresql@${{ matrix.postgres }})/include/postgresql/internal"
      
      - name: Install extension
        run: |
          sudo make PG_CONFIG=$(brew --prefix postgresql@${{ matrix.postgres }})/bin/pg_config install
      
      - name: Run tests
        run: |
          make PG_CONFIG=$(brew --prefix postgresql@${{ matrix.postgres }})/bin/pg_config installcheck
      
      - name: Show test failures
        if: failure()
        run: |
          cat regression.diffs || echo "No regression.diffs found"

  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - postgres: 17
            os: windows-2022
          - postgres: 16
            os: windows-2022
          - postgres: 14
            os: windows-2022
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download and install PostgreSQL
        shell: pwsh
        run: |
          $postgresVersion = "${{ matrix.postgres }}"
          
          # Use a different download URL that should work
          if ($postgresVersion -eq "17") {
            $installerUrl = "https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v8.9/runtime/postgresql-17.0-1-windows-x64.exe"
          } elseif ($postgresVersion -eq "16") {
            $installerUrl = "https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v8.9/runtime/postgresql-16.4-1-windows-x64.exe"
          } else {
            $installerUrl = "https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v8.9/runtime/postgresql-14.11-1-windows-x64.exe"
          }
          
          $installerPath = "$env:TEMP\postgresql-installer.exe"
          
          Write-Host "Downloading PostgreSQL $postgresVersion from $installerUrl"
          try {
            Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
          } catch {
            Write-Host "Failed to download from primary URL, trying alternative..."
            # Alternative URL if the first one fails
            $installerUrl = "https://get.enterprisedb.com/postgresql/postgresql-$postgresVersion-1-windows-x64.exe"
            Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
          }
          
          Write-Host "Installing PostgreSQL $postgresVersion"
          Start-Process -FilePath $installerPath -ArgumentList "--unattendedmodeui minimal --mode unattended --superpassword postgres --servicename postgresql$postgresVersion --servicepassword postgres --serverport 5432" -Wait
          
          # Add PostgreSQL to PATH
          $pgPath = "C:\Program Files\PostgreSQL\$postgresVersion\bin"
          $env:PATH = "$pgPath;$env:PATH"
          echo "$pgPath" | Out-File -FilePath $env:GITHUB_PATH -Append
          echo "PGROOT=C:\Program Files\PostgreSQL\$postgresVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "PostgreSQL installation completed"
      
      - name: Verify PostgreSQL installation
        shell: pwsh
        run: |
          Write-Host "PostgreSQL version:"
          pg_config --version
          Write-Host "PGROOT: $env:PGROOT"
          Write-Host "PATH contains PostgreSQL: $env:PATH.Contains('PostgreSQL')"
      
      - name: Build with nmake
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          nmake /F Makefile.win PGROOT=%PGROOT%
      
      - name: Install extension
        shell: cmd
        run: |
          nmake /F Makefile.win PGROOT=%PGROOT% install
      
      - name: Run tests
        shell: cmd
        run: |
          nmake /F Makefile.win PGROOT=%PGROOT% installcheck
      
      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: windows-test-results-${{ matrix.postgres }}
          path: |
            regression.diffs
            regression.out

  # Alternative i386 approach using direct Docker commands
  i386:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build and test in i386 container
        run: |
          docker run --platform linux/386 -it --rm \
            -v $(pwd):/src \
            -w /src \
            i386/debian:bookworm \
            sh -c "
            apt-get update && \
            apt-get install -y build-essential postgresql-16 postgresql-server-dev-16 sudo && \
            service postgresql start && \
            make && \
            make install && \
            sudo -u postgres make installcheck
            "
