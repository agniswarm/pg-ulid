name: build
on: [push, pull_request]

jobs:
  ubuntu:
    name: ubuntu (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 19
            os: ubuntu-24.04
          - postgres: 18
            os: ubuntu-24.04
          - postgres: 17
            os: ubuntu-24.04
          - postgres: 16
            os: ubuntu-24.04-arm
          - postgres: 15
            os: ubuntu-22.04
          - postgres: 14
            os: ubuntu-22.04-arm
          - postgres: 13
            os: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}
          dev-files: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build
        run: |
          export PG_CFLAGS="${{ matrix.postgres >= 18 && '-Wno-missing-field-initializers' || '' }} -DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare"
          make

      - name: Install (preserve PG_CONFIG)
        run: |
          export PG_CONFIG=$(which pg_config)
          sudo --preserve-env=PG_CONFIG make install-local

      - name: Ensure Postgres running
        run: |
          sudo service postgresql start || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: installcheck
        run: make installcheck

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          if [ -f regression.diffs ]; then
            cat regression.diffs
          else
            echo "No regression.diffs found"
          fi

  mac:
    name: macos (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: macos-15
          - postgres: 14
            os: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres (brew)
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build
        run: |
          export PG_CFLAGS="-DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-unknown-warning-option"
          make

      - name: Install
        run: make install-local

      - name: Ensure Postgres running (brew)
        run: |
          brew services start postgresql@${{ matrix.postgres }} || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: installcheck
        run: make installcheck

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          if [ -f regression.diffs ]; then
            cat regression.diffs
          else
            echo "No regression.diffs found"
          fi

      - name: scan-build (optional)
        run: make clean && $(brew --prefix llvm@$LLVM_VERSION)/bin/scan-build --status-bugs make
        env:
          LLVM_VERSION: ${{ matrix.os == 'macos-15' && 18 || 15 }}
          PG_CFLAGS: -DUSE_ASSERT_CHECKING

  windows:
    name: windows (postgres ${{ matrix.postgres }})
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref_name, 'mac') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgres: 17
            os: windows-2025
          - postgres: 14
            os: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ matrix.postgres }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build & install (MSVC)
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          where cl || echo "cl not found"
          where nmake || echo "nmake not found"
          where pg_config || echo "pg_config not found"
          where go || echo "go not found"
          nmake /NOLOGO /F Makefile.win
          nmake /NOLOGO /F Makefile.win install
        shell: cmd

      - name: Ensure Postgres service started
        run: |
          net start postgresql-x64-${{ matrix.postgres }} || echo "Service may not need manual start"
          :wait
          pg_isready
          if errorlevel 1 (
            echo Waiting for PostgreSQL...
            timeout /t 1 /nobreak >nul
            goto wait
          )
          echo PostgreSQL is ready!
        shell: cmd

      - name: installcheck
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          nmake /NOLOGO /F Makefile.win installcheck
        shell: cmd

      - name: Clean
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          nmake /NOLOGO /F Makefile.win clean
        shell: cmd

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          if exist regression.diffs (
            type regression.diffs
          ) else (
            echo No regression.diffs found
          )
        shell: cmd

  i386:
    name: i386 (postgres 15)
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    runs-on: ubuntu-latest
    container:
      image: debian:12
      options: --platform linux/386
    steps:
      - name: Minimal packages
        run: apt-get update && apt-get install -y build-essential git libipc-run-perl postgresql-15 postgresql-server-dev-15 sudo golang-go

      - name: Start Postgres
        run: service postgresql start || true

      - name: Build & install (i386)
        id: build_install
        run: |
          set -e
          git clone https://github.com/${{ github.repository }}.git pg-ulid
          cd pg-ulid
          git fetch origin ${{ github.ref }}
          git reset --hard FETCH_HEAD
          echo "=== repo sql/ listing ==="
          ls -la sql || true
          echo "=== repo src/ listing ==="
          ls -la src || true
          echo "=== Building extension (i386) ==="
          export GOARCH=386
          make
          echo "=== Installing binary + SQL (install-local) ==="
          export PG_CONFIG=$(which pg_config)
          sudo --preserve-env=PG_CONFIG make install-local
        env:
          PG_CFLAGS: "-DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare"

      - name: Ensure Postgres running (i386)
        run: |
          sudo service postgresql start || true
          until pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run regression tests (i386)
        id: run_tests
        run: |
          set -e
          cd pg-ulid
          echo "=== Running installcheck as postgres user ==="
          sudo -u postgres make installcheck
        env:
          PG_CFLAGS: "-DUSE_ASSERT_CHECKING -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare"

      - name: Show regression.diffs on failure
        if: ${{ failure() }}
        run: |
          echo "Working directory contents:"
          ls -la
          echo "Checking for regression.diffs:"
          if [ -f pg-ulid/regression.diffs ]; then
            cat pg-ulid/regression.diffs
          else
            echo "No regression.diffs found in pg-ulid/"
          fi

  valgrind:
    name: valgrind
    if: ${{ !startsWith(github.ref_name, 'mac') && !startsWith(github.ref_name, 'windows') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Postgres (valgrind)
        uses: ankane/setup-postgres-valgrind@v1
        with:
          postgres-version: 17
          check-ub: yes

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build static Go binary for valgrind
        env:
          CGO_ENABLED: "0"
        run: |
          echo "Building static Go binary for valgrind (CGO_ENABLED=$CGO_ENABLED)"
          # show go env for debugging
          go version
          go env | grep -E "(GOARCH|GOOS|CGO_ENABLED|GOROOT|GOMOD)" || true
          # build
          make OPTFLAGS=""

      - name: Install preserving PG_CONFIG (install-local)
        run: |
          export PG_CONFIG=$(which pg_config)
          echo "Using PG_CONFIG=$PG_CONFIG"
          sudo --preserve-env=PG_CONFIG make install-local

      - name: Valgrind diagnostics - check installed binary & files
        run: |
          set -euo pipefail
          BIND=$(pg_config --bindir)
          SHARE=$(pg_config --sharedir)
          echo "pg binddir: $BIND"
          echo "pg sharedir: $SHARE"
          echo; echo "ls -la binddir:"
          ls -la "$BIND" || true
          echo; echo "ls -la extension dir:"
          ls -la "$SHARE/extension" || true
          echo; echo "binary file:"
          file "$BIND/ulid_generator" || true
          echo; echo "ldd (may fail for static):"
          ldd "$BIND/ulid_generator" || true
          echo; echo "stat perms:"
          stat -c '%U %G %a %n' "$BIND/ulid_generator" || true

      - name: Valgrind diagnostics - run binary directly as runner
        run: |
          set +e
          BIND=$(pg_config --bindir)
          echo; echo "Run as runner user: $BIND/ulid_generator generate"
          "$BIND/ulid_generator" generate > /tmp/ulid_out 2>/tmp/ulid_err
          EC=$?
          echo "exitcode=$EC"
          echo "stdout:"
          sed -n '1,200p' /tmp/ulid_out || true
          echo "stderr:"
          sed -n '1,200p' /tmp/ulid_err || true
          set -e

      - name: Valgrind diagnostics - run binary as postgres user
        run: |
          set +e
          BIND=$(pg_config --bindir)
          echo; echo "Run as postgres user: $BIND/ulid_generator generate"
          # run and capture output in files so we can read them as postgres user
          sudo -u postgres bash -lc "'$BIND/ulid_generator' generate > /tmp/ulid_out_pg 2> /tmp/ulid_err_pg" || true
          RC=$?
          echo "postgres-run exitcode=$RC"
          echo "postgres stdout:"
          sudo -u postgres bash -lc 'sed -n "1,200p" /tmp/ulid_out_pg || true'
          echo "postgres stderr:"
          sudo -u postgres bash -lc 'sed -n "1,200p" /tmp/ulid_err_pg || true'
          set -e

      - name: Valgrind diagnostics - run binary under valgrind (as postgres)
        run: |
          set -euo pipefail
          # try running the ulid_generator under valgrind to see valgrind messages
          # valgrind might not be installed in the runner image, but ankane/setup-postgres-valgrind should provide it
          BIND=$(pg_config --bindir)
          echo "Running valgrind on the ulid_generator (timeout 20s)..."
          # run as postgres user to mimic COPY FROM PROGRAM environment
          sudo -u postgres timeout 20s valgrind --error-exitcode=1 --leak-check=full --log-file=/tmp/valgrind_ulid.log "$BIND/ulid_generator" generate || true
          echo "=== valgrind log (first 200 lines) ==="
          sudo -u postgres bash -lc 'sed -n "1,200p" /tmp/valgrind_ulid.log || true'
          echo "=== end valgrind log ==="

      - name: Run installcheck (valgrind)
        run: |
          set -e
          make installcheck
