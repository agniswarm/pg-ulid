name: Production Comprehensive Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  production-comprehensive-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build production Docker image
      run: |
        docker build -f Dockerfile.production -t ulid-prod:comprehensive .
        
    - name: Start production container
      run: |
        docker run -d \
          --name ulid-prod-comprehensive \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          -p 5432:5432 \
          ulid-prod:comprehensive
        
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until docker exec ulid-prod-comprehensive pg_isready -U postgres; do sleep 2; done'
        
    - name: Verify ULID extension installation
      run: |
        echo "Checking ULID extension installation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT * FROM pg_extension WHERE extname = 'ulid';"
        
        echo "Listing all ULID functions..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "\df ulid*"
        
    - name: Test core functionality
      run: |
        echo "=== Testing Core ULID Functionality ==="
        
        echo "1. Basic ULID generation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid() as basic_ulid;"
        
        echo "2. ULID length verification..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT length(ulid()::text) as ulid_length;"
        
        echo "3. Random ULID generation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid_random() as random_ulid;"
        
        echo "4. Crypto ULID generation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid_crypto() as crypto_ulid;"
        
        echo "5. Timestamp-based ULID generation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid_time(extract(epoch from now()) * 1000)::bigint as timestamp_ulid;"
        
    - name: Test casting operations
      run: |
        echo "=== Testing Casting Operations ==="
        
        echo "1. Text to ULID casting..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT '01ARZ3NDEKTSV4RRFFQ69G5FAV'::ulid as parsed_ulid;"
        
        echo "2. ULID to text casting..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid()::text as ulid_text;"
        
        echo "3. Timestamp to ULID casting..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT '2023-09-15 12:00:00'::timestamp::ulid as timestamp_ulid;"
        
        echo "4. ULID to timestamp casting..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid()::timestamp as ulid_timestamp;"
        
        echo "5. Round-trip timestamp test..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT '2023-09-15 12:00:00'::timestamp::ulid::timestamp as round_trip;"
        
        echo "6. UUID to ULID casting..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT gen_random_uuid()::ulid as uuid_ulid;"
        
    - name: Test monotonic generation
      run: |
        echo "=== Testing Monotonic Generation ==="
        
        echo "1. Monotonic ULID generation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid_generate_monotonic() as monotonic_ulid;"
        
        echo "2. Batch ULID generation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT array_length(ulid_batch(5), 1) as batch_size;"
        
        echo "3. Random batch generation..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT array_length(ulid_random_batch(3), 1) as random_batch_size;"
        
    - name: Test binary storage
      run: |
        echo "=== Testing Binary Storage ==="
        
        echo "1. ULID to bytea conversion..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT length(ulid()::bytea) as bytea_length;"
        
        echo "2. Bytea to ULID conversion..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid()::bytea::ulid as bytea_ulid;"
        
        echo "3. Binary round-trip test..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT ulid()::bytea::ulid::text as binary_round_trip;"
        
    - name: Install Python dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install psycopg2-binary pytest
        
    - name: Run comprehensive Python tests
      run: |
        cd test/python
        echo "=== Running Python Test Suite ==="
        
        echo "1. Basic functionality tests..."
        python3 -m pytest test_01_basic_functionality.py -v
        
        echo "2. Casting operations tests..."
        python3 -m pytest test_02_casting_operations.py -v
        
        echo "3. Monotonic generation tests..."
        python3 -m pytest test_03_monotonic_generation.py -v
        
        echo "4. Stress tests..."
        python3 -m pytest test_04_stress_tests.py -v
        
        echo "5. Binary storage tests..."
        python3 -m pytest test_05_binary_storage.py -v
        
        echo "6. Running all tests together..."
        python3 -m pytest . -v --tb=short
        
    - name: Test production readiness
      run: |
        echo "=== Production Readiness Tests ==="
        
        echo "1. Container health check..."
        docker ps | grep ulid-prod-comprehensive
        
        echo "2. Database connectivity..."
        docker exec ulid-prod-comprehensive pg_isready -U postgres
        
        echo "3. Extension status..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'ulid';"
        
        echo "4. Performance test (1000 ULIDs)..."
        docker exec ulid-prod-comprehensive psql -U postgres -d testdb -c "SELECT COUNT(*) FROM generate_series(1, 1000) AS s, LATERAL (SELECT ulid()) AS u;"
        
    - name: Cleanup
      if: always()
      run: |
        docker stop ulid-prod-comprehensive || true
        docker rm ulid-prod-comprehensive || true
        
    - name: Test Results Summary
      if: always()
      run: |
        echo "ðŸŽ‰ Production Comprehensive Test Completed!"
        echo "âœ… ULID extension is fully functional in production container"
        echo "âœ… All core functionality tests passed"
        echo "âœ… All casting operations work correctly"
        echo "âœ… Monotonic generation is working"
        echo "âœ… Binary storage is working"
        echo "âœ… Python test suite passed"
        echo "âœ… Container is production-ready"
